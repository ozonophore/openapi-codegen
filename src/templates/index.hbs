{{>header}}
{{#if core}}

{{#each core}}
export { ApiError{{#notEquals ../core.length 1}} as ApiError${{{@index}}}{{/notEquals}} } from './{{{this}}}ApiError';
{{#if @root.useCancelableRequest}}
export { CancelablePromise } from './{{{this}}}CancelablePromise';
{{/if}}
export { OpenAPI{{#notEquals ../core.length 1}}  as OpenAPI${{{@index}}}{{/notEquals}} } from './{{{this}}}OpenAPI';
export type { TOpenAPIConfig{{#notEquals ../core.length 1}} as TOpenAPIConfig${{{@index}}}{{/notEquals}} } from './{{{this}}}OpenAPI';
{{/each}}
{{/if}}
{{#if models}}

{{#each models}}
{{#if enum}}
export { {{{name}}}{{#if alias }} as {{{alias}}}{{/if}} } from './{{{package}}}{{{path}}}';
{{else if useUnionTypes}}
export type { {{{name}}}{{#if alias }} as {{{alias}}}{{/if}} } from './{{{package}}}{{{path}}}';
{{else if enums}}
export { {{{name}}}{{#if alias }} as {{{alias}}}{{/if}} } from './{{{package}}}{{{path}}}';
{{else}}
export type { {{{name}}}{{#if alias }} as {{{alias}}}{{/if}} } from './{{{package}}}{{{path}}}';
{{/if}}
{{/each}}
{{/if}}
{{#if schemas}}

{{#each schemas}}
export { {{{name}}}Schema{{#if alias }} as {{{alias}}}Schema{{/if}} } from './{{{package}}}{{{path}}}Schema';
{{/each}}
{{/if}}
{{#if services}}

{{#each services}}
export { {{{name}}} } from './{{{package}}}{{{name}}}';
{{/each}}
{{/if}}
