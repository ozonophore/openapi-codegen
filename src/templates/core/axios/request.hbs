{{>header}}

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse, AxiosRequestHeaders } from 'axios';
import FormData from 'form-data';
import { types } from 'util';

import { ApiError } from './ApiError';
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
{{#if @root.useCancelableRequest}}
import { CancelablePromise } from './CancelablePromise';
{{/if}}
import type { TOpenAPIConfig } from './OpenAPI';
import { EHTTP_STATUS_CODES, EHTTP_STATUS_NAME } from './HttpStatusCode';

{{>functions/isDefined}}


{{>functions/isString}}


{{>functions/isStringWithValue}}


{{>functions/isBinary}}


{{>functions/isSuccess}}


{{>functions/getQueryString}}


{{>functions/getUrl}}


{{>functions/getFormData}}


{{>functions/resolve}}


{{>axios/getRequestBody}}


{{>axios/sendRequest}}


{{>axios/getHeaders}}


{{>axios/getResponseHeader}}


{{>axios/getResponseBody}}


{{>functions/catchErrors}}


/**
 * Request using axios client
 * @param config The OpenAPI configuration object
 * @param options The request options from the the service
 * @returns ApiResult
 * @throws ApiError
 */
{{#if @root.useCancelableRequest}}
 export function request<T>(options: ApiRequestOptions, config: TOpenAPIConfig): CancelablePromise<T> {
    return new CancelablePromise(async(resolve, reject, onCancel) => {
        try {
            const url = getUrl(options, config);
            
            if (!onCancel.isCancelled) {
                const response = await sendRequest<T>(options, url, config, onCancel);
                const responseBody = getResponseBody(response);
                const responseHeader = getResponseHeader(response, options.responseHeader);
                const result: ApiResult = {
                    url,
                    ok: isSuccess(response.status),
                    status: response.status,
                    statusText: response.statusText,
                    body: responseHeader || responseBody,
                };

                catchErrors(options, result);
                resolve(result.body);
            }
        } catch (error) {
            reject(error);
        }
    });
}
{{else}}
export async function request<T>(options: ApiRequestOptions, config: TOpenAPIConfig): Promise<T> {
    return new Promise(async (resolve, reject) => {
        try {
            const url = getUrl(options, config);
            const response = await sendRequest(options, url, config);
            const responseBody = getResponseBody(response);
            const responseHeader = getResponseHeader(response, options.responseHeader);

            const result: ApiResult = {
                url,
                ok: isSuccess(response.status),
                status: response.status,
                statusText: response.statusText,
                body: responseHeader || responseBody,
            };

            catchErrors(options, result);
            resolve(result.body);
        } catch (error) {
            reject(error);
        }
    });
}
{{/if}}