{{>header}}

{{#if imports}}
{{#each imports}}
import type { {{{name}}}{{#if alias}} as {{{alias}}}{{/if}} } from '{{{@root.outputModels}}}{{{path}}}';
{{/each}}
{{/if}}
import { request as __request } from '{{{outputCore}}}request';
{{#if @root.useVersion}}
import { OpenAPI } from '{{{outputCore}}}OpenAPI';
{{/if}}

export class {{{name}}} {

    {{#each operations}}
    /**
    {{#if deprecated}}
     * @deprecated
    {{/if}}
    {{#if summary}}
     * {{{summary}}}
    {{/if}}
    {{#if description}}
     * {{{description}}}
    {{/if}}
    {{#unless @root.useOptions}}
    {{#if parameters}}
    {{#each parameters}}
     * @param {{{name}}} {{{description}}}
    {{/each}}
    {{/if}}
    {{/unless}}
    {{#each results}}
     * @returns {{{type}}} {{{description}}}
    {{/each}}
     * @throws ApiError
     */
    public static async {{{name}}}({{>parameters}}): Promise<{{>result}}> {
        {{#if @root.useCustomRequest}}
        return await __request<{{>result}}>({
        {{else}}
        const result = await __request({
        {{/if}}
            method: '{{{method}}}',
            path: `{{{path}}}`,
            {{#if parametersCookie}}
            cookies: {
                {{#each parametersCookie}}
                '{{{prop}}}': {{{name}}},
                {{/each}}
            },
            {{/if}}
            {{#if parametersHeader}}
            headers: {
                {{#each parametersHeader}}
                '{{{prop}}}': {{{name}}},
                {{/each}}
            },
            {{/if}}
            {{#if parametersQuery}}
            query: {
                {{#each parametersQuery}}
                '{{{prop}}}': {{{name}}},
                {{/each}}
            },
            {{/if}}
            {{#if parametersForm}}
            formData: {
                {{#each parametersForm}}
                '{{{prop}}}': {{{name}}},
                {{/each}}
            },
            {{/if}}
            {{#if parametersBody}}
            body: {{{parametersBody.name}}},
            {{#if parametersBody.mediaType}}
            mediaType: '{{{parametersBody.mediaType}}}',
            {{/if}}
            {{/if}}
            {{#if responseHeader}}
            responseHeader: '{{{responseHeader}}}',
            {{/if}}
            {{#if errors}}
            errors: {
                {{#each errors}}
                {{{code}}}: `{{{description}}}`,
                {{/each}}
            },
            {{/if}}
        {{#if @root.useCustomRequest}}
        }).then((resp) => resp);
        {{else}}
        });
        return result.body;
        {{/if}}
    }

    {{/each}}
}
