/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { EEnumWithNumbers } from './../models/./EnumWithNumbers';
import type { EEnumWithStrings } from './../models/./EnumWithStrings';
import type { EEnumWithStringsWithType } from './../models/./EnumWithStringsWithType';
import { request as __request } from './../core/request';
import type { ApiRequestOptions } from './../core/ApiRequestOptions';
import { OpenAPI } from './../core/OpenAPI';

const callWithEnums = (requestBody?: {
    enumWithNumbers?: EEnumWithNumbers;

    enumWithStrings?: EEnumWithStrings;

    enumWithStringsWithType?: EEnumWithStringsWithType;
}): ApiRequestOptions => ({
    method: 'POST',
    path: `/api/v{api-version}/enums`,
    body: requestBody,
    mediaType: 'application/json; charset=utf-8',
});

export type TEnumsOptions = {
    callWithEnums: (requestBody?: {
        enumWithNumbers?: EEnumWithNumbers;

        enumWithStrings?: EEnumWithStrings;

        enumWithStringsWithType?: EEnumWithStringsWithType;
    }) => ApiRequestOptions;
};

export const EnumsOptions: TEnumsOptions = {
    callWithEnums: callWithEnums,
};

export class EnumsService {
    /**
     * @param requestBody
     * @throws ApiError
     */
    public static callWithEnums(requestBody?: {
        enumWithNumbers?: EEnumWithNumbers;

        enumWithStrings?: EEnumWithStrings;

        enumWithStringsWithType?: EEnumWithStringsWithType;
    }): Promise<void> {
        return __request<void>(EnumsOptions.callWithEnums(requestBody), OpenAPI);
    }
}
